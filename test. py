def bowling_score(frames):
    # --- Validation ---
    for frame in frames:
        if not isinstance(frame, (list, tuple)):
            raise ValueError(f"Invalid frame: {frame}")
        if len(frame) < 1 or len(frame) > 3:
            raise ValueError(f"Invalid frame length: {frame}")
        for pins in frame:
            if pins < 0 or pins > 10:
                raise ValueError(f"Impossible roll: {pins} pins")
        # For frames with two rolls (except strike), pins cannot exceed 10
        if len(frame) >= 2 and frame[0] != 10 and sum(frame[:2]) > 10:
            raise ValueError(f"Invalid frame total: {frame}")

    # --- Flatten frames into rolls ---
    rolls = []
    for frame in frames:
        rolls.extend(frame)

    # --- Calculate score ---
    score = 0
    roll_index = 0
    total_frames = min(10, len(frames))  # Handle partial games safely

    for frame in range(total_frames):
        if roll_index >= len(rolls):
            break

        # Strike
        if rolls[roll_index] == 10:
            bonus1 = rolls[roll_index + 1] if roll_index + 1 < len(rolls) else 0
            bonus2 = rolls[roll_index + 2] if roll_index + 2 < len(rolls) else 0
            score += 10 + bonus1 + bonus2
            roll_index += 1
        # Spare
        elif roll_index + 1 < len(rolls) and rolls[roll_index] + rolls[roll_index + 1] == 10:
            bonus = rolls[roll_index + 2] if roll_index + 2 < len(rolls) else 0
            score += 10 + bonus
            roll_index += 2
        # Open frame
        else:
            score += rolls[roll_index]
            if roll_index + 1 < len(rolls):
                score += rolls[roll_index + 1]
            roll_index += 2

    return score


# --- Tests (corrected) ---
def run_tests():
    test_cases = [
        ([[0],[0],[0],[0],[0],[0],[0],[0],[0],[0]], 0),
        ([[3,3]]*10, 60),
        ([[10]]*12, 300),
        ([[5,5]]*9 + [[5,5,5]], 150),
        ([[5,3],[10],[4,6]], 38),
        ([[3,4]], 7),  # corrected (sheet says 24, but real score is 7)
        ([[10],[5,5],[3,2],[10]], 48),
        ([[0],[0],[0],[0],[0],[0],[0],[0],[10,7,3]], 20),
        ([[0],[0],[0],[0],[0],[0],[0],[0],[7,3,5]], 15),
        ([[5,3],[10],[4,6],[0,0],[8,1],[10],[6,3],[7,2],[10,10,10]], 140),
        ([[5,4],[3,3],[7,3],[10]], 45)
    ]

    for i, (frames, expected) in enumerate(test_cases, 1):
        result = bowling_score(frames)
        print(f"Test {i}: Expected={expected}, Got={result}")
        assert result == expected, f"Test {i} failed!"

    # Invalid input tests
    try:
        bowling_score([[15,5]])
        print("Test invalid 1 failed (should raise error)")
    except ValueError as e:
        print("Test invalid 1 passed:", e)

    try:
        bowling_score([[5,8]])
        print("Test invalid 2 failed (should raise error)")
    except ValueError as e:
        print("Test invalid 2 passed:", e)

    print("\nAll tests completed!")


if __name__ == "__main__":
    run_tests()
